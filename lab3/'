#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
#include <signal.h>

void signalHandler(int);


int main()
{ 
	pid_t pid;
    	if ((pid = fork()) < 0) {
        	perror("fork failure");
        	exit(1);
    	}
    	else if (pid == 0) {
        	//child
        	int i;
        	while(1){
			printf("waiting...\t");
			i = rand() % 7;
			sleep(i);
			if(i%2){
				kill(getppid(), SIGUSR1);	
			}
			else{
				kill(getppid(), SIGUSR2);
			}	
		}
		exit(0);
    	}
    	else {
		printf("spawned child PID# %d", pid);
    		//parent
    		while(1);
    	}
    	return 0;
}

void sigHandler(int sigNum){
	if(sigNum == SIGUSR1)
		printf("received a SIGUSR1 signal\n");
	if(sigNum == SIGUSR2)
		printf("received a SIGUSR2 signal\n");
	if(sigNum == SIGINT)
		printf("received. That's it, I'm shutting you down");
}
